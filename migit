#!/bin/bash
MIGIT_NAME="$(basename "$0")"
VERSION="0.9.29"
VERSION_STRING="$VERSION Copyright (C) 2023-2024 Thilo Graf, License: GPL2"

EXEC_CALL="$0 $@"

#set -e
#set -x

TRUE="1"
FALSE="0"

# Default values for the variables
GIT_SOURCE_URL="$1"
TARGET_REPO_PREFIX=""
TARGET_REPO_SUFFIX=""
GIT_PROJECT_NAME=""
GIT_COMMIT_INTRO=""
GIT_COMMIT_SUFFIX=""
GIT_SSH_KEYFILE=""
NO_BACKUPS="$FALSE"
RESET="$FALSE"

CUR_DIR=$(pwd)
export WORKDIR=$CUR_DIR/work
ORIGIN_REPO_NAME=".origin-tmp"
GIT_TEMP_REPO=""
GIT_WORKING_COPY_DIR=$WORKDIR/origin
DEPLOY_DIR="$CUR_DIR/deploy"
MAILMAP_FILE="$CUR_DIR/.mailmap"
MESSAGES_REWRITE="$TRUE"
NO_PROGRESS="$FALSE"
PRUNE_EMPTY=""
REPLACE_REVS=""
PRUNE_DEGENERATE=""
NO_FF=""

REPOLIST="."
EXCLUDE_REPOLIST=""
BRANCH_LIST=
GIT_FILTER_REPO_NAME="git-filter-repo"
GIT_FILTER_REPO_EXEC=$(which git-filter-repo)

ERRORS=""
WARNINGS=""
NOTES=""

# Defaults for origin commit URL web-links
GIT_SRC_COMMIT_URL_PREFIX=""
GIT_SRC_COMMIT_URL_SUFFIX=""
GIT_ORIGIN_COMMIT_URL_BASE=

# Function to display script help
show_help() {
	echo
	echo " ------------------------------------------------------------------"
	echo " $MIGIT_NAME"
	echo " Version: $VERSION_STRING"
	echo
	echo " Script tool for extracting subdirectories into individual"
	echo " repositories and rewriting Git repositories for a clean history,"
	echo " based on the functionality of $GIT_FILTER_REPO_NAME."
	echo " ------------------------------------------------------------------"
	echo
	echo " Usage:"
	echo "  $0 <clone url> [OPTIONS]	        Clone URL of the Git repository that needs to be rewritten or from which subdirectories should be extracted into separate repositories."
	echo "  $0 -u <clone url> [OPTIONS]"
	echo
	echo " Options:"
	echo "  Subdirectories to extract:"
	echo "  -S, --subdir                            Subdirectory which to be rewritten."
	echo "                                          If a complete root directory, meaning the repository at once, should be rewritten, specify only a dot without any further directories '--subdir .'"
	echo "      --subdir-list=<LIST>                List of subdirectories to be rewritten. The list must be enclosed in ''. Use spaces as separators (Default: All subdirectories of the first level within the root directory)"
	echo "      --exclude-subdir-list=<LIST>        Subdirectories to be ignored. The list must be enclosed in ''. Use spaces as separators."
	echo "                                          NOTE! Only use this option if the --subdir-list= and --subdir option are not specified!"
	echo
	echo "  Branches:"
	echo "      --branch-list=<BRANCH1 BRANCH2...>  List of branches to rewrite. An empty list includes all branches."
	echo
	echo "  Deploy repositories:"
	echo "  -d, --deploy-dir=<DIR>                  Output directory in which the rewritten repositories will be placed. Default:    $DEPLOY_DIR"
	echo "  -p, --project-name-prefix=<PREFIX>      Prefix of the target folder to be prepended to the extracted repository name.    $DEPLOY_DIR/TARGET-ROOT-PROJECT/<prefix>REPO"
	echo "  -s, --project-name-suffix=<SUFFIX>      Suffix of the target folder to be appended to the extracted repository name.     $DEPLOY_DIR/TARGET-ROOT-PROJECT/REPO<suffix>"
	echo "                                          You can also combine both options:                                               $DEPLOY_DIR/TARGET-ROOT-PROJECT/<prefix>REPO<suffix>"
	echo "      --no-backups                        Older extracted repositories will be overwritten. Only the latest extracted repositories are always stored in the deployment folder."
	echo "  -T, --target-root-project-name=<NAME>   Name of the target folder within the deploy directory. Default: Current date and time of the rewrite."
	echo
	echo "  Commit messages:"
	echo "  -n, --no-rewrite-messages               Commit messages will be not touched, but paths will still be rewritten, and if a .mailmap file is available, authors will also be rewritten."
	echo "  -P, --prefix-source-url=<PREFIX>        Prefix for the source commit URL. This sets the prefix for the link to the source commit, which is prepended to the commit ID."
	echo "      --suffix-source-url=<SUFFIX>        Suffix for the source commit URL. This sets the suffix for the link to the source commit, which is apended to the prefix (option -P) commit ID. Default: '/commit'"
	echo "	                                        Note: --pattern-source-url=<PATTERN>	Obsolete: The same like --prefix-source-url"
	echo "      --commit-introduction=<INTRO>       Intro for commit introductions in the first line of all commits. Default: the respective subdirectory name or the original repo name."
	echo "                                          This only makes sense if a single repo is to be rewritten or if a consistent introduction of the commit message is desired."
	echo "      --commit-suffix=<SUFFIX>            Adds a signature at the end of the modified commit message e.g a text 'Automatically migrated by Migit v.$VERSION'"
	echo "      --reset                             Revert all rewritten commit messages to their original state, provided they are recognized as such."
	echo
	echo "  Commits:                                NOTE: These commit options correspond to those of git-filter-repo and are directly passed through to git-filter-repo:"
	echo "      --replace-refs {delete-no-add, delete-and-add, update-no-add, update-or-add, update-and-add}"
	echo "                                          Replace refs (see git-replace(1)) are used to rewrite parents (unless turned off by the usual git mechanism); this flag specifies what do do with those"
	echo "                                          refs afterward. Replace refs can either be deleted or updated to point at new commit hashes. Also, new replace refs can be added for each commit"
	echo "                                          rewrite. With 'update-or-add', new replace refs are only added for commit rewrites that aren't used to update an existing replace ref. default is"
	echo "                                          'update-and-add' if $GIT_DIR/filter-repo/already_ran does not exist; 'update-or-add' otherwise."
	echo "      --prune-empty {always, auto, never} Whether to prune empty commits. 'auto' (the default) means only prune commits which become empty (not commits which were empty in the original repo,"
	echo "                                          unless their parent was pruned). When the parent of a commit is pruned, the first non-pruned ancestor becomes the new parent."
	echo "      --prune-degenerate {always, auto, never}"
	echo "                                          Since merge commits are needed for history topology, they are typically exempt from pruning. However, they can become degenerate with the pruning of"
	echo "                                          other commits (having fewer than two parents, having one commit serve as both parents, or having one parent as the ancestor of the other.) If such merge"
	echo "                                          commits have no file changes, they can be pruned. The default ('auto') is to only prune empty merge commits which become degenerate (not which started"
	echo "                                          as such)."
	echo "      --no-ff                             Even if the first parent is or becomes an ancestor of another parent, do not prune it. This modifies how --prune-degenerate behaves, and may be useful"
	echo "                                          in projects who always use merge --no-ff."
	echo
	echo "  Normalize e-mails of authors:"
	echo "  -m, --mailmap-file=<PATH>               Path to the mailmap file. If not specified, it will be searched for inside the script root folder by default. If no .mailmap file was found, normalization will be skipped."
	echo
	echo "  ssh access:"
	echo "      --id-rsa-file=<PATH>                Path to your privat key file e.g. ~/.ssh/id_rsa"
	echo
	echo "  Global:"
	echo "  -v, --version                           Show $MIGIT_NAME version"
	echo "  -h, --help                              Show this help"
	echo "  -q                                      Don't show progress"
}

# Validate git-filter-repo
if [ -z "$GIT_FILTER_REPO_EXEC" ]; then
	echo " -------------------------------------------------------------------"
	echo " $GIT_FILTER_REPO_NAME is not installed."
	echo " Make sure $GIT_FILTER_REPO_NAME is installed."
	echo " https://github.com/newren/$GIT_FILTER_REPO_NAME#how-do-i-install-it"
	echo " -------------------------------------------------------------------"
	echo
	show_help
	exit 1
fi

# Define options
OPTIONS=u:nP:T:p:s:S:d:m:qhv
LONGOPTIONS=branch-list:,id-rsa-file:,prefix-source-url:,suffix-source-url:,target-root-project-name:,project-name-prefix:,project-name-suffix:,subdir-list:,exclude-subdir-list:,commit-introduction:,commit-suffix:,deploy-dir:,mailmap-file:,no-backups,version,help,reset,replace-refs:,prune-empty:,prune-degenerate:,no-ff

# For downward compatibility
OPTIONS_OBSOLETE=
LONGOPTIONS_OBSOLETE=,pattern-source-url:

OPTIONS+=$OPTIONS_OBSOLETE
LONGOPTIONS+=$LONGOPTIONS_OBSOLETE

# Parse options
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [ $? != 0 ]; then
	# getopt returned an error
	exit 2
fi

# Evaluate parsed argument strings
eval set -- "$PARSED"

# run through options
while true; do
	case "$1" in
		-u)
		GIT_SOURCE_URL="$2"
		shift 2
		;;
		-n)
		MESSAGES_REWRITE="$FALSE"
		shift
		;;
		-P)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		-T)
		GIT_PROJECT_NAME="$2"
		shift 2
		;;
		-p)
		TARGET_REPO_PREFIX="$2"
		shift 2
		;;
		-s)
		TARGET_REPO_SUFFIX="$2"
		shift 2
		;;
		-S)
		REPOLIST="$2"
		shift 2
		;;
		-d)
		DEPLOY_DIR="$2"
		shift 2
		;;
		-m)
		MAILMAP_FILE="$2"
		shift 2
		;;
		-q)
		NO_PROGRESS="$TRUE"
		shift
		;;
		-h|--help)
		show_help
		exit 0
		;;
		-v|--version)
		echo "$VERSION"
		exit 0
		;;
		--id-rsa-file)
		GIT_SSH_KEYFILE="$2"
		shift 2
		;;
		--prefix-source-url)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		--suffix-source-url)
		GIT_SRC_COMMIT_URL_SUFFIX="$2"
		shift 2
		;;
		--pattern-source-url)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		--target-root-project-name)
		GIT_PROJECT_NAME="$2"
		shift 2
		;;
		--project-name-prefix)
		TARGET_REPO_PREFIX="$2"
		shift 2
		;;
		--project-name-suffix)
		TARGET_REPO_SUFFIX="$2"
		shift 2
		;;
		--branch-list)
		BRANCH_LIST="$2"
		shift 2
		;;
		--subdir-list)
		REPOLIST="$2"
		shift 2
		;;
		--exclude-subdir-list)
		EXCLUDE_REPOLIST="$2"
		shift 2
		;;
		--commit-introduction)
		GIT_COMMIT_INTRO="$2"
		shift 2
		;;
		--commit-suffix)
		GIT_COMMIT_SUFFIX="$2"
		shift 2
		;;
		--deploy-dir)
		DEPLOY_DIR="$2"
		shift 2
		;;
		--mailmap-file)
		MAILMAP_FILE="$2"
		shift 2
		;;
		--no-backups)
		NO_BACKUPS="$TRUE"
		shift
		;;
		--reset)
		RESET="$TRUE"
		shift
		;;
		--replace-refs)
		REPLACE_REVS="--replace-refs $2"
		shift 2
		;;
		--prune-empty)
		PRUNE_EMPTY="--prune-empty $2"
		shift 2
		;;
		--prune-degenerate)
		PRUNE_DEGENERATE="--prune-degenerate $2"
		shift 2
		;;
		--no-ff)
		NO_FF="--no-ff"
		shift
		;;
		--)
		shift
		break
		;;
		*)
		echo "Unexpected option: $1"
		exit 3
		;;
	esac
done

## logging for quiet mode
if [[ "$NO_PROGRESS" == "$TRUE" ]]; then
	echo -e "------------------------------------------"
	echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] [$EXEC_CALL]"
fi

## Function to handle exit behavior
my_exit() {
	# set exit-Code as Parameter
	local exit_code=$1

	if [[ "$NO_PROGRESS" == "$TRUE" ]]; then
		# only if the script is used in quiet mode within automation, e.g. in cron jobs
		exit 0
	else
		# required exit code
		exit $exit_code
	fi
}

## Check if the required options are provided
## Check clone url
if [[ -z "$GIT_SOURCE_URL" ]]; then
	echo "Clone URL was not specified."
	show_help
	my_exit 1
elif [[ "$GIT_SOURCE_URL" == file:* ]]; then
	echo "Invalid protocol: 'file://' is not allowed. Please use a relative path to a valid git repository for local access."
	my_exit 1
fi

# get absolute path of the current script
SCRIPT_DIR=$(realpath $(dirname "$0"))

# Extract the absolute path from GIT_SOURCE_URL if it's a local path
if [[ "$GIT_SOURCE_URL" == file://* ]]; then
	# Removes 'file://' and converts to an absolute path, this is already handled, but here only for completeness
	GIT_REPO_PATH=$(realpath "${GIT_SOURCE_URL:7}")
elif [[ "$GIT_SOURCE_URL" == /* ]]; then
	# Converts to an absolute path
	GIT_REPO_PATH=$(realpath "$GIT_SOURCE_URL")
elif [[ "$GIT_SOURCE_URL" == ./* || "$GIT_SOURCE_URL" == ./ ]]; then
	# Converts to an absolute path, if `./` or a path within it is used
	GIT_REPO_PATH=$(realpath "$GIT_SOURCE_URL")
else
	# Sets the path to empty if it's not a local file URL
	GIT_REPO_PATH=""
fi

# Check if GIT_REPO_PATH is within SCRIPT_DIR
if [[ "$GIT_REPO_PATH" == "$SCRIPT_DIR"* ]]; then
	echo "Error: The specified git URL ('$GIT_SOURCE_URL') is located within the script's directory or its subdirectories. Please specify a different URL."
	my_exit 1
fi

## Create deploy directory
mkdir -p $DEPLOY_DIR


## Set temporarily origin clone dir
GIT_TEMP_REPO="${WORKDIR}/${ORIGIN_REPO_NAME}_$(basename ${GIT_REPO_PATH})"

## Get the original repository, delete it if already exists, it must be fresh
if [ -d $GIT_TEMP_REPO/.git ]; then
	rm -rf $GIT_TEMP_REPO 
fi

## Function to replace the echo command, for usage with the -q optiom
function my_echo() {
	if [ "$NO_PROGRESS" == "$FALSE" ]; then
		echo "${@}"
	else
		echo "${@}" | sed -r "s/\x1B\[[0-9;]*[a-zA-Z]//g"
	fi
}

## Function to display a spinner while a process is running
function show_spinner() {
	local pid="$1"
	local message="$2"
	local spinner="/-\|"

	while kill -0 $pid 2>/dev/null; do
		for i in $(seq 0 3); do
			if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
				my_echo -ne "\r[${spinner:$i:1}] ${message}"
				sleep 0.1
			fi
		done
	done

	wait $pid
	local error_code=$?

	if [ $? -eq 0 ]; then
		if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
			my_echo -ne "\r[\e[32m✓\e[0m] ${message}\n"
		fi
	else
		my_echo -ne "\r[✗] ${message} Error: ${error_code}\n"
	fi
}

# get start time
start=$(date +%s)

# clone...
if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
	my_echo -n "[ ] Clone: $GIT_SOURCE_URL"
fi

clone_repo() {
	git clone "$GIT_SOURCE_URL" "$GIT_TEMP_REPO" > /dev/null 2>&1
}

handle_clone_error() {
	my_echo -e "\e[1A[\e[31m✗\e[0m] Clone failed: $GIT_SOURCE_URL"
	my_exit 1
}

if [[ "$GIT_SSH_KEYFILE" == "" ]]; then
	clone_repo &
else
	if [ -f "$GIT_SSH_KEYFILE" ]; then
		GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEYFILE" clone_repo &
	else
		my_echo -e "\r[\e[33m✗\e[0m] Clone: Wrong or missing ssh key file: $GIT_SSH_KEYFILE"
		my_exit 1
	fi
fi
spinner_pid=$!
show_spinner $spinner_pid "Clone"
wait $!  # wait for background process
if [[ $? -ne 0 ]]; then
    handle_clone_error
fi


# pull branches...
local_branches=$(git -C "$GIT_TEMP_REPO" branch | sed 's/\*//g' | awk '{$1=$1};1')

git -C "$GIT_TEMP_REPO" branch -r | grep -v '\->' | while read remote; do
	branch_name="${remote#origin/}"
	if [[ -z "$BRANCH_LIST" ]] || echo "$BRANCH_LIST" | grep -qw "$branch_name"; then
		if ! echo "$local_branches" | grep -q "^$branch_name$"; then
			if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
				my_echo -n "[ ] Create missing branch: ${branch_name}"
			fi
			git -C "$GIT_TEMP_REPO" checkout -b "$branch_name" "$remote" > /dev/null 2>&1 &
			spinner_pid=$!
			show_spinner $spinner_pid "Create missing branch: ${branch_name}"
		fi
	fi
done


# Cleanup if necessary
if [ -d $GIT_WORKING_COPY_DIR ]; then
	rm -rf $GIT_WORKING_COPY_DIR
fi

# Create a working copy from the original repo
cp -rf $GIT_TEMP_REPO $GIT_WORKING_COPY_DIR

# Switch to the temporary repository
cd $GIT_TEMP_REPO

# Create a repository list for subdirectories to be imported.
# If the list is empty, all subdirectories of the first level will be added.
if [[ -z "$REPOLIST" ]]; then
	REPOLIST=$(ls -d */ | sed 's#/##')
fi

## Handle Exclude List
# Remove entries from EXCLUDE_REPOLIST from REPOLIST
for entry in $EXCLUDE_REPOLIST; do
	REPOLIST=$(my_echo "$REPOLIST" | sed "s|$entry|""|g")
done
## end Exclude List

## set project name
if [[ "$GIT_PROJECT_NAME" == "" ]]; then
	GIT_PROJECT_NAME=$(basename $GIT_SOURCE_URL | sed 's/\.git//')
fi


## Clean up older project symlink before create new link to latest result
if [[ -e "$DEPLOY_DIR/$GIT_PROJECT_NAME" ]]; then
	unlink $DEPLOY_DIR/$GIT_PROJECT_NAME
fi

## remove older deployed project repos if backups are disabled
if [[ "$NO_BACKUPS" == "$TRUE" ]]; then
	rm -rf $DEPLOY_DIR/$GIT_PROJECT_NAME-*
fi

## preset url prefix for source commit
if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == "" ]]; then
	GIT_SRC_COMMIT_URL_SUFFIX="/commit"
fi

## preset url prefix for source commit
if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == "" ]]; then
	GIT_PROJECT_NAME=$(basename $GIT_SOURCE_URL | sed 's/\.git//')
	url="$GIT_SOURCE_URL"
	# Entfernen von .git
	GIT_SRC_COMMIT_URL_PREFIX="${url%\.git}"
fi

## check preset url prefix for source commit
GIT_ORIGIN_COMMIT_URL_BASE="${GIT_SRC_COMMIT_URL_PREFIX}${GIT_SRC_COMMIT_URL_SUFFIX}"
if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == *"@"* ]]; then
	# git or ssh is not usable
	wget_exit_stat=7
else
	# get output of wget into variable
	wget_output=$(wget --spider "${GIT_ORIGIN_COMMIT_URL_BASE}" 2>&1)
	wget_exit_stat=$?
	spinner_pid=$!
	show_spinner $spinner_pid "Check for URL source commit prefix URL: \e[1m${GIT_ORIGIN_COMMIT_URL_BASE}\e[0m ..."

	# check for 301 Moved Permanently in wget_output
	if [ $wget_exit_stat -ne 0 ]; then
		if echo "$wget_output" | grep -q "301 Moved Permanently"; then
			# Behandle 301 als Erfolg
			wget_exit_stat=0
		fi
	fi
fi
if [ $wget_exit_stat -ne 0 ]; then
	if [ $wget_exit_stat -eq 7 ]; then
		err_desc="An error occurred in the protocol or in supporting a protocol. Use URL's with http:// or https:// only!"
	elif [ $wget_exit_stat -eq 8 ]; then
		err_desc="Set Parameter -P to set a valid source commit prefix for source commits."
	elif [ $wget_exit_stat -eq 1 ]; then
		err_desc=""
	else
		err_desc="Error: $wget_exit_stat"
	fi

	WARN_ORIG_COMMIT="Check for URL source commit prefix failed! URL: [\e[33m${GIT_ORIGIN_COMMIT_URL_BASE}\e[0m]"

	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -ne "\e[1A[\e[33m!\e[0m] Warning! $WARN_ORIG_COMMIT\n"
	fi

	WARNINGS+=" - $WARN_ORIG_COMMIT\n   Entry of the origin commits was skipped. $err_desc\n"

	GIT_ORIGIN_COMMIT_URL_BASE=""
fi


## set time stamp
TIME_STAMP="$(date +%Y-%m%d-%H%M%S)"

## create result directory inside deploy directory
mkdir -p $DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP

## start rewriting
for SUBDIR in $REPOLIST; do
	# Ensure a fresh working copy is available because it won't exist after the loop
	cp -rf $GIT_TEMP_REPO $GIT_WORKING_COPY_DIR

	# Ensure we are in the working copy
	cd $GIT_WORKING_COPY_DIR

	# ...set repo name if only origin is output
	if [[ "$SUBDIR" == "." ]]; then
		# Create the original repo name from the original clone URL
		# Remove .git extension from URL
		GIT_SOURCE=$(my_echo "$GIT_SOURCE_URL" | sed 's/\.git$//')
		REPO_NAME="${TARGET_REPO_PREFIX}$(basename ${GIT_SOURCE})${TARGET_REPO_SUFFIX}"
	else
		# Assemble the target folder name. This is the repo that will be generated from the subdirectory.
		REPO_NAME="${TARGET_REPO_PREFIX}$(basename ${SUBDIR})${TARGET_REPO_SUFFIX}"
	fi

	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Rewriting ${REPO_NAME}"
	fi

	if [ ! -d $SUBDIR ]; then
		ERR_NOSUBDIR="$SUBDIR not found!"
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $ERR_NOSUBDIR\n"
		ERRORS+=" - $ERR_NOSUBDIR"
		continue
	fi

	PATH_OPTION="--path $SUBDIR --target . --path-rename $SUBDIR/:"
	if [[ "$SUBDIR" == "." ]]; then
		PATH_OPTION=
	fi

	MAILMAP_OPTION=""

	if [ -f $MAILMAP_FILE ]; then
		MAILMAP_OPTION="--mailmap $MAILMAP_FILE"
	else
		if [[ "$MAILMAP_FILE" != "" ]]; then
			WARN_NOMAILMAP="Mailmap file not found!"
			my_echo -ne "\r[\e[33m!\e[0m] Warning! $WARN_NOMAILMAP\n"
			WARNINGS+=" - Rewriting: $WARN_NOMAILMAP\n"
		fi
	fi

	COMMIT_OPTIONS="$REPLACE_REVS  $PRUNE_EMPTY $PRUNE_DEGENERATE $NO_FF"

	GIT_FILTER_REPO_OPTS="--force  $MAILMAP_OPTION $PATH_OPTION --source $GIT_TEMP_REPO $COMMIT_OPTIONS"
# 	 my_echo "$GIT_FILTER_REPO_EXEC $GIT_FILTER_REPO_OPTS"
# 	 exit 0

	# Adjust commit messages, include origin data, and normalize author names with emails
	if [[ "$MESSAGES_REWRITE" != "$TRUE" ]]; then
		$GIT_FILTER_REPO_EXEC $GIT_FILTER_REPO_OPTS > /dev/null 2>&1 &
		spinner_pid=$!
		show_spinner ${spinner_pid} "Rewriting ${REPO_NAME}"
		NOTES+=" - Commit messages not rewritten"
	else
		$GIT_FILTER_REPO_EXEC $GIT_FILTER_REPO_OPTS --commit-callback '
		import datetime
		import re
		import os

		workdir = os.environ["WORKDIR"]

		# Reset commit messages
		if "'"$RESET"'" == "1":
		    pattern = b"Origin commit data.*(\n.*)*"
		    commit.message = re.sub(pattern, b"", commit.message, flags=re.DOTALL)
		    with open(f"{workdir}/.rewrite", "w") as file:
		        file.write("Commit messages have been reset.")
		    return

		# Check if the commit message already contains the tag "Origin commit data"
		# Skip rewriting for this commit as it is already been processed
		# Convert byte string to normal string for comparison
		origin_tmp = commit.message.decode("utf-8")
		if "Origin commit data" in origin_tmp:
		    with open(f"{workdir}/.rewrite", "w") as file:
		        file.write("Original commit message(s) have already been rewritten!")
		    return

		# Preserve original message
		origin_message = commit.message
		origin_message_length = len(origin_message)

		# Add an empty line
		commit.message = commit.message + b"\n\n" \

		# Generate new message data
		# Determine and add the branch
		commit.message += b"Origin commit data\n------------------\n"
		b"Branch: " + b"'$(git symbolic-ref HEAD)'" + b"\n"

		# Add the link to the source commit
		if "'"$GIT_ORIGIN_COMMIT_URL_BASE"'" != "":
		    commit.message += b"Commit: '"$GIT_ORIGIN_COMMIT_URL_BASE"'/" + commit.original_id + b"\n"

		# Add author, date, and origin message
		commit.message += b"Author: " + commit.author_name + b" <" + commit.author_email + b">\n" + \
		b"Date:   " + (datetime.datetime.fromtimestamp(int(commit.author_date.split()[0])).strftime("%Y-%m-%d (%a, %d %b %Y)") + "\n").encode() + \
		b"\n"

		# Clean up, remove unnecessary characters
		commit.message = commit.message.replace(b"   ", b" ")
		commit.message = commit.message.replace(b"  ", b" ")
		commit.message = commit.message.lstrip(b"-");
		commit.message = commit.message.lstrip(b"*");
		commit.message = commit.message.lstrip(b" ");

		# Check the first chars. if rigin_message is not in commit.message, if not, then append origin message
		if origin_message != commit.message[:origin_message_length]:
		    commit.message += b"Origin message was:\n------------------\n" + origin_message

		# Adjust the introduction
		if "'"$SUBDIR"'" != ".":
		    commit.message = commit.message.replace(b"'"$SUBDIR"':", b"")
		    commit.message = b"'$(basename $SUBDIR)': " + commit.message

		# Append the specified message if only a single commit introduction exists and no further additions
		if origin_message.count(b"\n") == 1:
		    commit.message += b"\n------------------\nNo further description and justification available within origin commit message!"

		if "'"$GIT_COMMIT_SUFFIX"'" != "":
		    commit.message += b"\n\n------------------\n'"$GIT_COMMIT_SUFFIX"'"

		# Final cleanup and finish, references will be cleaned up from the history as well
		commit.message = commit.message.replace(b"  ", b" ")
		'  > /dev/null 2>&1 &

		spinner_pid=$!
		show_spinner ${spinner_pid} "Rewriting ${REPO_NAME}"

		# read information from file
		if [[ -f "$WORKDIR/.rewrite" ]]; then
			read_data=$(< ${WORKDIR}/.rewrite)
			if [[ "$RESET" == "$FALSE" ]]; then
				if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
					my_echo -e "\r[\e[33m!\e[0m] Warning! ${read_data}"
				fi
				WARNINGS+=" - Rewriting: $read_data Commit message(s) kept untouched.\n"
			else
				my_echo -e "\r[\e[32m✓\e[0m] Reset: ${read_data}"
			fi
			rm -f $WORKDIR/.rewrite
		fi
	fi
	
	# Cleanup
	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Clean up "
	fi
	rm -rf $GIT_WORKING_COPY_DIR/$ORIGIN_REPO_NAME
	if [ $? -eq 0 ]; then
		if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
			my_echo -ne "\r[\e[32m✓\e[0m] Clean up \n"
		fi
	else
		my_echo -ne "\r[\e[33m✗\e[0m] Error!\n"
		error_code=$?
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $error_code"
		$ERRORS+="$error_code - $error_description"
		break
	fi
	
	cd $WORKDIR

	## Prepare and move everything into the deploy directory...
	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Deploy"
	fi

	# ...move results from working directory into project directory	
	mv $GIT_WORKING_COPY_DIR $DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP/$REPO_NAME

	if [ $? -eq 0 ]; then
		my_echo -ne "\r[\e[32m✓\e[0m] Deploy: Rewritten repository saved in [\e[1m$DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP/$REPO_NAME\e[0m]\n"
		generated_repos+=" - $REPO_NAME\n"
	else
		my_echo -ne "\r[\e[33m✗\e[0m] Error!\n"
		error_code=$?
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $error_code"
		$ERRORS+="$error_code - $error_description"
		break
	fi
done

## Finally create symlink which is pointing to last created project name.
ln -sf $DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP $DEPLOY_DIR/$GIT_PROJECT_NAME

## show results
entry_count=$(grep -o ' - ' <<< "$generated_repos" | wc -l)
my_echo -e
my_echo "Processed repositories: $entry_count"
my_echo -e "$generated_repos"

if [[ "$NOTES" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[36mNotes:\e[0m"
	my_echo -e
	my_echo -e "$NOTES"
fi
if [[ "$WARNINGS" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[33mWarnings:\e[0m"
	my_echo -e
	my_echo -e "$WARNINGS"
fi
#TODO: Errors are not yet listed
if [[ "$ERRORS" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[31mErrors:\e[0m"
	my_echo -e
	my_echo -e "$ERRORS"
fi


# get end time
end=$(date +%s)
duration=$((end - start))
minutes=$((duration / 60))
seconds=$((duration % 60))
my_echo -e "\e[1m\e[32mdone :-)\e[0m"
my_echo -e "elapsed time: $minutes min $seconds sec"
my_echo -e "------------------------------------------"
